pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                //Obtener el cÃ³digo del repositorio
                git 'https://github.com/Alex201666/UNIR.git'
                stash name:'code', includes:'**'
                sh '''
                whoami
                hostname
                '''
            }
        }
        
        stage('Test'){
            parallel{
                stage('Unit') {
                    agent { label 'principal' } //Si el mismo agente tiene 2 ejecutores podriamos usar el mismo agente en las Tests
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            unstash name:'code'
                            sh '''
                                whoami
                                hostname
                                export PYTHONPATH=.
                                pytest --junitxml=result-unit.xml test/unit
                            '''
                        }
                    }
                }
                stage('Rest') {
                    agent { label 'agent3' } //Si el mismo agente tiene 2 ejecutores podriamos usar el mismo agente en las Tests
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            unstash name:'code'
                            sh '''
                            whoami
                            hostname
                            export FLASK_API=app/api.py
                            flask run --port=5001 &
                            sleep 10
                            sudo ls -la /home/alex/Escritorio/UNIR/test/wiremock/wiremock-standalone-3.5.4.jar
                            sudo java -jar /home/alex/Escritorio/UNIR/test/wiremock/wiremock-standalone-3.5.4.jar --port=9090 --root-dir test/wiremock &
                            sleep 3
                            python3 -m pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                    }
                }
            }
        }
                stage('Cobertura') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            unstash name:'code'
                            sh '''
                            whoami
                            hostname
                            python3-coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                            python3-coverage xml
                            '''
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, failUnstable: false, conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95'}
                            }
                            
                        }
                }
                stage('Static'){
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            unstash name:'code'
                            sh '''
                                whoami
                                hostname
                                python3 -m flake8 --exit-zero --format=pylint app >flake8.out
                            '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                            }
                            
                    }
        }
        
                stage('Security'){
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            unstash name:'code'
                            sh '''
                                whoami
                                hostname
                                python3 -m bandit -r . -f custom -o bandit.out -ll -ii --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                            '''
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                            }
                    }
        }


                stage('Performance') {
                    steps{
                        unstash name:'code'
                        sh '''
                        whoami
                        hostname
                        rm flask.jtl
                        sudo /home/alex/Descargas/apache-jmeter-5.6.3/bin/jmeter -n -t P24.jmx -f -l flask.jtl'''
                        perfReport sourceDataFiles: 'flask.jtl'
                        }
                }
            }
}
